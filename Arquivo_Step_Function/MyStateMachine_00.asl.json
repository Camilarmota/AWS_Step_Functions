{
  "Comment": "A description of my state machine",
  "StartAt": "Add Order Entry",
  "States": {
    "Add Order Entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Arguments": {
        "TableName": "CustomerOrdersTable",
        "Item": {
          "customerID": {
            "S": "$.customerID"
          },
          "orderID": {
            "S": "$.orderID"
          }
        }
      },
      "Next": "Escolha",
      "Output": {
        "statusCode": "$.SdkHttpMetadata.HttpStatusCode"
      }
    },
    "Escolha": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Call Credit Card Service To Charge Customer",
          "Condition": "{% (\"statusCode\") = (200) %}"
        },
        {
          "Next": "Falha",
          "Condition": "{% (\"statusCode\") > (200) %}"
        }
      ]
    },
    "Call Credit Card Service To Charge Customer": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "test:$LATEST",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Success",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Fallback - Delete Fail Order"
        }
      ]
    },
    "Fallback - Delete Fail Order": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:deleteItem",
      "Arguments": {
        "TableName": "MyDynamoDBTable",
        "Key": {
          "Column": {
            "S": "MyEntry"
          }
        }
      },
      "Next": "Falha"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Falha": {
      "Type": "Fail",
      "Error": "ErrorName"
    }
  },
  "QueryLanguage": "JSONata"
}